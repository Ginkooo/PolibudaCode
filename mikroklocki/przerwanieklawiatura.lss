
przerwanieklawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003b  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000025c  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000eb  00000000  00000000  0000050f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000024c  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ef  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000153  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  64:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <get_key_code>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int get_key_code() {
	PORTA = 0b11101111;
  6c:	8f ee       	ldi	r24, 0xEF	; 239
  6e:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	8a ef       	ldi	r24, 0xFA	; 250
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <get_key_code+0x8>
	_delay_ms(1);
	char x = PINA | 0xf0;
  78:	29 b3       	in	r18, 0x19	; 25
  7a:	20 6f       	ori	r18, 0xF0	; 240
  7c:	84 ec       	ldi	r24, 0xC4	; 196
  7e:	99 e0       	ldi	r25, 0x09	; 9
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <get_key_code+0x14>
	
	_delay_ms(10);
	if (x != (PINA | 0xf0)) return 0;
  84:	89 b3       	in	r24, 0x19	; 25
  86:	80 6f       	ori	r24, 0xF0	; 240
  88:	28 17       	cp	r18, r24
  8a:	09 f0       	breq	.+2      	; 0x8e <get_key_code+0x22>
  8c:	78 c0       	rjmp	.+240    	; 0x17e <get_key_code+0x112>
	   //Linie te s¹ wykomentowane poniewa¿ na mojej maszynie importowanie
	   //util/delay.h crashowa³o program AVR Studio.
	   //normalnie te linie zwiêkszaj¹ prawdopodobieñstwo, ¿e na
	   //odczyt nie wp³ywaj¹ drgania styków
	switch(x) {
  8e:	2b 3f       	cpi	r18, 0xFB	; 251
  90:	81 f0       	breq	.+32     	; 0xb2 <get_key_code+0x46>
  92:	2c 3f       	cpi	r18, 0xFC	; 252
  94:	18 f4       	brcc	.+6      	; 0x9c <get_key_code+0x30>
  96:	27 3f       	cpi	r18, 0xF7	; 247
  98:	91 f4       	brne	.+36     	; 0xbe <get_key_code+0x52>
  9a:	0e c0       	rjmp	.+28     	; 0xb8 <get_key_code+0x4c>
  9c:	2d 3f       	cpi	r18, 0xFD	; 253
  9e:	19 f0       	breq	.+6      	; 0xa6 <get_key_code+0x3a>
  a0:	2e 3f       	cpi	r18, 0xFE	; 254
  a2:	69 f4       	brne	.+26     	; 0xbe <get_key_code+0x52>
  a4:	03 c0       	rjmp	.+6      	; 0xac <get_key_code+0x40>
  a6:	25 e0       	ldi	r18, 0x05	; 5
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	6b c0       	rjmp	.+214    	; 0x182 <get_key_code+0x116>
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	68 c0       	rjmp	.+208    	; 0x182 <get_key_code+0x116>
  b2:	29 e0       	ldi	r18, 0x09	; 9
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	65 c0       	rjmp	.+202    	; 0x182 <get_key_code+0x116>
		case 0b11111110: return 1; //kolumna 1 klawisz 1
		case 0b11111101: return 5; 
		case 0b11111011: return 9; 
  b8:	2d e0       	ldi	r18, 0x0D	; 13
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	62 c0       	rjmp	.+196    	; 0x182 <get_key_code+0x116>
		case 0b11110111: return 13; 
	}
	PORTA = 0b11011111;
  be:	8f ed       	ldi	r24, 0xDF	; 223
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	8a ef       	ldi	r24, 0xFA	; 250
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <get_key_code+0x5a>
	_delay_ms(1);
	x = PINA | 0xf0;
  ca:	89 b3       	in	r24, 0x19	; 25
	switch(x) {
  cc:	80 6f       	ori	r24, 0xF0	; 240
  ce:	8b 3f       	cpi	r24, 0xFB	; 251
  d0:	81 f0       	breq	.+32     	; 0xf2 <get_key_code+0x86>
  d2:	8c 3f       	cpi	r24, 0xFC	; 252
  d4:	18 f4       	brcc	.+6      	; 0xdc <get_key_code+0x70>
  d6:	87 3f       	cpi	r24, 0xF7	; 247
  d8:	91 f4       	brne	.+36     	; 0xfe <get_key_code+0x92>
  da:	0e c0       	rjmp	.+28     	; 0xf8 <get_key_code+0x8c>
  dc:	8d 3f       	cpi	r24, 0xFD	; 253
  de:	19 f0       	breq	.+6      	; 0xe6 <get_key_code+0x7a>
  e0:	8e 3f       	cpi	r24, 0xFE	; 254
  e2:	69 f4       	brne	.+26     	; 0xfe <get_key_code+0x92>
  e4:	03 c0       	rjmp	.+6      	; 0xec <get_key_code+0x80>
  e6:	26 e0       	ldi	r18, 0x06	; 6
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	4b c0       	rjmp	.+150    	; 0x182 <get_key_code+0x116>
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	48 c0       	rjmp	.+144    	; 0x182 <get_key_code+0x116>
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	45 c0       	rjmp	.+138    	; 0x182 <get_key_code+0x116>
		case 0b11111110: return 2; //kolumna 2 klawisz 1
		case 0b11111101: return 6; 
		case 0b11111011: return 10; 
  f8:	2e e0       	ldi	r18, 0x0E	; 14
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	42 c0       	rjmp	.+132    	; 0x182 <get_key_code+0x116>
		case 0b11110111: return 14; 
	}
	PORTA = 0b10111111;
  fe:	8f eb       	ldi	r24, 0xBF	; 191
 100:	8b bb       	out	0x1b, r24	; 27
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <get_key_code+0x9a>
	_delay_ms(1);
	x = PINA | 0xf0;
 10a:	89 b3       	in	r24, 0x19	; 25
	switch(x) {
 10c:	80 6f       	ori	r24, 0xF0	; 240
 10e:	8b 3f       	cpi	r24, 0xFB	; 251
 110:	81 f0       	breq	.+32     	; 0x132 <get_key_code+0xc6>
 112:	8c 3f       	cpi	r24, 0xFC	; 252
 114:	18 f4       	brcc	.+6      	; 0x11c <get_key_code+0xb0>
 116:	87 3f       	cpi	r24, 0xF7	; 247
 118:	91 f4       	brne	.+36     	; 0x13e <get_key_code+0xd2>
 11a:	0e c0       	rjmp	.+28     	; 0x138 <get_key_code+0xcc>
 11c:	8d 3f       	cpi	r24, 0xFD	; 253
 11e:	19 f0       	breq	.+6      	; 0x126 <get_key_code+0xba>
 120:	8e 3f       	cpi	r24, 0xFE	; 254
 122:	69 f4       	brne	.+26     	; 0x13e <get_key_code+0xd2>
 124:	03 c0       	rjmp	.+6      	; 0x12c <get_key_code+0xc0>
 126:	27 e0       	ldi	r18, 0x07	; 7
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	2b c0       	rjmp	.+86     	; 0x182 <get_key_code+0x116>
 12c:	23 e0       	ldi	r18, 0x03	; 3
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	28 c0       	rjmp	.+80     	; 0x182 <get_key_code+0x116>
 132:	2b e0       	ldi	r18, 0x0B	; 11
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	25 c0       	rjmp	.+74     	; 0x182 <get_key_code+0x116>
		case 0b11111110: return 3; //kolumna 3 klawisz 1
		case 0b11111101: return 7; 
		case 0b11111011: return 11; 
 138:	2f e0       	ldi	r18, 0x0F	; 15
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	22 c0       	rjmp	.+68     	; 0x182 <get_key_code+0x116>
		case 0b11110111: return 15; 
	}
	PORTA = 0b01111111;
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	8b bb       	out	0x1b, r24	; 27
 142:	8a ef       	ldi	r24, 0xFA	; 250
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <get_key_code+0xda>
	_delay_ms(1);
	x = PINA | 0xf0;
 14a:	89 b3       	in	r24, 0x19	; 25
	switch(x) {
 14c:	80 6f       	ori	r24, 0xF0	; 240
 14e:	8b 3f       	cpi	r24, 0xFB	; 251
 150:	81 f0       	breq	.+32     	; 0x172 <get_key_code+0x106>
 152:	8c 3f       	cpi	r24, 0xFC	; 252
 154:	18 f4       	brcc	.+6      	; 0x15c <get_key_code+0xf0>
 156:	87 3f       	cpi	r24, 0xF7	; 247
 158:	91 f4       	brne	.+36     	; 0x17e <get_key_code+0x112>
 15a:	0e c0       	rjmp	.+28     	; 0x178 <get_key_code+0x10c>
 15c:	8d 3f       	cpi	r24, 0xFD	; 253
 15e:	19 f0       	breq	.+6      	; 0x166 <get_key_code+0xfa>
 160:	8e 3f       	cpi	r24, 0xFE	; 254
 162:	69 f4       	brne	.+26     	; 0x17e <get_key_code+0x112>
 164:	03 c0       	rjmp	.+6      	; 0x16c <get_key_code+0x100>
 166:	28 e0       	ldi	r18, 0x08	; 8
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	0b c0       	rjmp	.+22     	; 0x182 <get_key_code+0x116>
 16c:	24 e0       	ldi	r18, 0x04	; 4
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	08 c0       	rjmp	.+16     	; 0x182 <get_key_code+0x116>
 172:	2c e0       	ldi	r18, 0x0C	; 12
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	05 c0       	rjmp	.+10     	; 0x182 <get_key_code+0x116>
		case 0b11111110: return 4; //kolumna 4 klawisz 1
		case 0b11111101: return 8; 
		case 0b11111011: return 12; 
 178:	20 e1       	ldi	r18, 0x10	; 16
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <get_key_code+0x116>
		case 0b11110111: return 16; 
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 0;
}
 182:	c9 01       	movw	r24, r18
 184:	08 95       	ret

00000186 <__vector_1>:



ISR(INT0_vect) {
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	PORTB = get_key_code();
 1a8:	0e 94 36 00 	call	0x6c	; 0x6c <get_key_code>
 1ac:	88 bb       	out	0x18, r24	; 24
	PORTA = 0b00001111;
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	8b bb       	out	0x1b, r24	; 27
 1b2:	80 e5       	ldi	r24, 0x50	; 80
 1b4:	93 ec       	ldi	r25, 0xC3	; 195
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <__vector_1+0x30>
	_delay_ms(200);
	PORTB = 0;
 1ba:	18 ba       	out	0x18, r1	; 24
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <main>:

int main() {
	DDRB = 0xFF;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	87 bb       	out	0x17, r24	; 23
	DDRA= 0xF0;
 1e2:	80 ef       	ldi	r24, 0xF0	; 240
 1e4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00001111;
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	8b bb       	out	0x1b, r24	; 27
	MCUCR |= 1<<ISC01;
 1ea:	85 b7       	in	r24, 0x35	; 53
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC00);
 1f0:	85 b7       	in	r24, 0x35	; 53
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	85 bf       	out	0x35, r24	; 53
	GICR |= 1<<INT0;
 1f6:	8b b7       	in	r24, 0x3b	; 59
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	8b bf       	out	0x3b, r24	; 59
	sei();
 1fc:	78 94       	sei
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <main+0x20>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
